// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "@hey-api/client-fetch";
import type {
  PostApiAuthLoginData,
  PostApiAuthLoginResponses,
  GetApiSkillsData,
  GetApiSkillsResponses,
  GetApiUsersCurrentData,
  GetApiUsersCurrentResponses,
  PutApiUsersCurrentData,
  PutApiUsersCurrentResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postApiAuthLogin = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthLoginData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostApiAuthLoginResponses, unknown, ThrowOnError>({
    url: "/api/Auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiSkills = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiSkillsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetApiSkillsResponses, unknown, ThrowOnError>({
    url: "/api/Skills",
    ...options,
  });
};

export const getApiUsersCurrent = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUsersCurrentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetApiUsersCurrentResponses, unknown, ThrowOnError>(
    {
      url: "/api/Users/current",
      ...options,
    },
  );
};

export const putApiUsersCurrent = <ThrowOnError extends boolean = false>(
  options?: Options<PutApiUsersCurrentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<PutApiUsersCurrentResponses, unknown, ThrowOnError>(
    {
      url: "/api/Users/current",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    },
  );
};
